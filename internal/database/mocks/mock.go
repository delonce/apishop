// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	database "github.com/delonce/apishop/internal/database"
	gomock "github.com/golang/mock/gomock"
)

// MockProductDB is a mock of ProductDB interface.
type MockProductDB struct {
	ctrl     *gomock.Controller
	recorder *MockProductDBMockRecorder
}

// MockProductDBMockRecorder is the mock recorder for MockProductDB.
type MockProductDBMockRecorder struct {
	mock *MockProductDB
}

// NewMockProductDB creates a new mock instance.
func NewMockProductDB(ctrl *gomock.Controller) *MockProductDB {
	mock := &MockProductDB{ctrl: ctrl}
	mock.recorder = &MockProductDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductDB) EXPECT() *MockProductDBMockRecorder {
	return m.recorder
}

// InsertCheck mocks base method.
func (m *MockProductDB) InsertCheck(purchCheck database.Check) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCheck", purchCheck)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCheck indicates an expected call of InsertCheck.
func (mr *MockProductDBMockRecorder) InsertCheck(purchCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCheck", reflect.TypeOf((*MockProductDB)(nil).InsertCheck), purchCheck)
}

// InsertProductFromCheck mocks base method.
func (m *MockProductDB) InsertProductFromCheck(position database.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductFromCheck", position)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductFromCheck indicates an expected call of InsertProductFromCheck.
func (mr *MockProductDBMockRecorder) InsertProductFromCheck(position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductFromCheck", reflect.TypeOf((*MockProductDB)(nil).InsertProductFromCheck), position)
}

// SelectProductByName mocks base method.
func (m *MockProductDB) SelectProductByName(productName string) (*database.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductByName", productName)
	ret0, _ := ret[0].(*database.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProductByName indicates an expected call of SelectProductByName.
func (mr *MockProductDBMockRecorder) SelectProductByName(productName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductByName", reflect.TypeOf((*MockProductDB)(nil).SelectProductByName), productName)
}
