// Code generated by MockGen. DO NOT EDIT.
// Source: subject.go

// Package mock_subject is a generated GoMock package.
package mock_subject

import (
	reflect "reflect"

	consumer "github.com/delonce/apishop/internal/service/consumer"
	gomock "github.com/golang/mock/gomock"
)

// MockSubject is a mock of Subject interface.
type MockSubject struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectMockRecorder
}

// MockSubjectMockRecorder is the mock recorder for MockSubject.
type MockSubjectMockRecorder struct {
	mock *MockSubject
}

// NewMockSubject creates a new mock instance.
func NewMockSubject(ctrl *gomock.Controller) *MockSubject {
	mock := &MockSubject{ctrl: ctrl}
	mock.recorder = &MockSubjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubject) EXPECT() *MockSubjectMockRecorder {
	return m.recorder
}

// GetSubAmount mocks base method.
func (m *MockSubject) GetSubAmount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubAmount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSubAmount indicates an expected call of GetSubAmount.
func (mr *MockSubjectMockRecorder) GetSubAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubAmount", reflect.TypeOf((*MockSubject)(nil).GetSubAmount))
}

// Notify mocks base method.
func (m *MockSubject) Notify(order map[string]int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", order)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockSubjectMockRecorder) Notify(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSubject)(nil).Notify), order)
}

// Subscribe mocks base method.
func (m *MockSubject) Subscribe(arg0 consumer.Consumer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubjectMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubject)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockSubject) Unsubscribe(arg0 consumer.Consumer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubjectMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubject)(nil).Unsubscribe), arg0)
}
